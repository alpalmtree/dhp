import { existsSync, mkdirSync } from "node:fs";

import type { PathLike } from "node:fs";
import { cwd } from "node:process";
import type { Hono } from "./vendor/hono.ts";

import { type Config, getConfig } from "./config.ts";
import { viteDevServer, viteSetup } from "./viteSetup.ts";
import {
  type AppGlobals,
  getGlobalVariables,
  populateGlobals,
  type RouteImport,
} from "./appGlobals.ts";
import { writeTypesFiles } from "./writeFiles.ts";

/**
 * Configuration for your app. It has its default options
 * and will read your local `dhp.config.ts` file in the
 * root of your project.
 */
export const appConfig: Config = await getConfig();
if (appConfig.useVite) await viteSetup(appConfig);

const fileRouterPath: PathLike = `${cwd()}${appConfig.routerPath}`;

/**
 * Global variables used by the application to work. It includes:
 * - Named routes
 * - Named actions
 * - Vite scripts manifest (for vite production mode)
 */
export const appGlobals: AppGlobals = getGlobalVariables(
  appConfig,
);

if (!existsSync(fileRouterPath)) mkdirSync(fileRouterPath);

const router = async (
  app: Hono,
): Promise<void> => {
  const routes = await populateGlobals({
    appConfig,
    appGlobalsInstance: appGlobals,
  });

  writeTypesFiles(appGlobals, appConfig);
  routes.forEach((cb) => cb(app));
};

/**
 * Function accepting a Hono app instance for initializing
 * the file-based web router. It returns the runtime config
 * generated after the creation of the router.
 * @param app Hono instance
 * @returns
 */
export const createRouter = async (
  app: Hono,
): Promise<{
  appConfig: Config;
  appGlobals: AppGlobals;
  app: Hono;
}> => {
  await router(app);
  if (appConfig.useVite && !appConfig.viteDevMode) {
    await viteDevServer(appConfig);
  }

  return {
    appConfig,
    appGlobals,
    app,
  };
};

/**
 * Exported name from your route file. It will
 * be mapped and used by the `route` function
 * so you can reorganize your files without
 * losing the reference to then
 */
const namedRoutes = appGlobals.namedRoutes;

/**
 * Exported actions from your route file. It will
 * be mapped and used by the `action` function.
 */
const actions = appGlobals.actions;

/**
 * Scripts manifest generated by the in-house built
 * plugin @timberstack/vite-plugin-better-manifest.
 */
const viteScripts = appGlobals.viteScripts;

export type { Config, RouteImport };
export { actions, getConfig, namedRoutes, viteScripts };
