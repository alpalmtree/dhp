// src/index.ts
import { cwd } from "node:process";
import {
  existsSync,
  readdirSync,
  renameSync,
  rmSync,
  writeFileSync
} from "node:fs";
function importedChunks(manifest, name) {
  const seen = /* @__PURE__ */ new Set();
  function getImportedChunks(chunk) {
    const chunks = [];
    for (const file of chunk.imports ?? []) {
      const imported = manifest[file];
      if (seen.has(file)) {
        continue;
      }
      seen.add(file);
      chunks.push(...getImportedChunks(imported));
      chunks.push(imported);
    }
    return chunks;
  }
  return getImportedChunks(manifest[name]);
}
var cssLink = (cssFile) => `<link rel="stylesheet" href="/${cssFile}" />`;
var scriptLink = (manifest, name) => `<script type="module" src="/${manifest[name].file}"></script>`;
var preloadLink = (chunk) => `<link rel="modulepreload" href="/${chunk.file}" />`;
var generateHeadScripts = (fileName, viteManifest) => {
  const strings = [];
  const cssChunks = viteManifest[fileName].css ?? [];
  for (const cssFile of cssChunks) {
    strings.push(cssLink(cssFile));
  }
  for (const chunk of importedChunks(viteManifest, fileName)) {
    const cssChunks2 = chunk.css ?? [];
    for (const cssFile of cssChunks2) {
      strings.push(cssLink(cssFile));
    }
  }
  strings.push(scriptLink(viteManifest, fileName));
  for (const chunk of importedChunks(viteManifest, fileName)) {
    strings.push(preloadLink(chunk));
  }
  return strings.join("\n");
};
function index_default(userOptions) {
  const { resourcesDir, tsBuildTarget, publicDir } = {
    resourcesDir: "/resources",
    tsBuildTarget: "esnext",
    publicDir: "/public",
    ...userOptions
  };
  const files = readdirSync(`${cwd()}${resourcesDir}`, { withFileTypes: true }).map((t) => ({ name: t.name, isFile: t.isFile() })).filter((dir) => dir.isFile);
  const entrypoints = files.map((file) => `/${file.name}`);
  const buildOptions = {
    // generate .vite/manifest.json in outDir
    manifest: true,
    copyPublicDir: false,
    outDir: `${cwd()}${publicDir}`,
    emptyOutDir: false,
    target: tsBuildTarget,
    rollupOptions: {
      input: entrypoints
    }
  };
  let importsManifest;
  return {
    name: "vite-plugin-better-manifest",
    config(viteConfig) {
      viteConfig.root = `${cwd()}${resourcesDir}`;
      viteConfig.build = buildOptions;
    },
    writeBundle(_, assets) {
      const manifest = assets[".vite/manifest.json"];
      if (!manifest || !manifest.source) return;
      const builtHeads = entrypoints.reduce((acc, current) => {
        acc[current] = generateHeadScripts(
          current.slice(1),
          JSON.parse(manifest.source)
        );
        return acc;
      }, {});
      importsManifest = builtHeads;
    },
    closeBundle() {
      try {
        rmSync(`${cwd()}${resourcesDir}/.vite`, { recursive: true });
      } catch (_) {
      }
      try {
        if (existsSync(`${cwd()}/.vite`)) {
          rmSync(`${cwd()}/.vite`, { recursive: true });
        }
        renameSync(`${buildOptions.outDir}/.vite`, `${cwd()}/.vite`);
        writeFileSync(
          `${cwd()}/.vite/better-manifest.json`,
          JSON.stringify(importsManifest, null, 2),
          "utf-8"
        );
      } catch (_) {
      }
      console.log("Build ended successfully");
    }
  };
}
export {
  index_default as default
};
